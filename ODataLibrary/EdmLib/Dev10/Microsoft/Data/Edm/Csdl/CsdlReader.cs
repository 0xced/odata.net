//   Copyright 2011 Microsoft Corporation
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

using System.Collections.Generic;
using System.Linq;
using System.Xml;
using Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics;
using Microsoft.Data.Edm.Csdl.Internal.Parsing;
using Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast;
using Microsoft.Data.Edm.Validation;

namespace Microsoft.Data.Edm.Csdl
{
    /// <summary>
    /// Provides CSDL parsing services for EDM models.
    /// </summary>
    public static class CsdlReader
    {
        /// <summary>
        /// Returns an IEdmModel for the given CSDL artifacts.
        /// </summary>
        /// <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
        /// <param name="model">The model generated by parsing.</param>
        /// <param name="errors">Errors reported while parsing.</param>
        /// <returns>Success of the parse operation.</returns>
        public static bool TryParse(IEnumerable<XmlReader> readers, out IEdmModel model, out IEnumerable<EdmError> errors)
        {
            return TryParse(readers, Enumerable.Empty<XmlReader>(), false, out model, out errors);
        }

        /// <summary>
        /// Returns an IEdmModel for the given CSDL artifacts.
        /// </summary>
        /// <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
        /// <param name="allowRemovingImmutableAnnotations">A flag denoting whether the resulting IEdmModel will allow the removal of immutable CSDL annotations.</param>
        /// <param name="model">The model generated by parsing.</param>
        /// <param name="errors">Errors reported while parsing.</param>
        /// <returns>Success of the parse operation.</returns>
        public static bool TryParse(IEnumerable<XmlReader> readers, bool allowRemovingImmutableAnnotations, out IEdmModel model, out IEnumerable<EdmError> errors)
        {
            return TryParse(readers, Enumerable.Empty<XmlReader>(), allowRemovingImmutableAnnotations, out model, out errors);
        }

        /// <summary>
        ///  Returns an IEdmModel for the given CSDL artifacts.
        /// </summary>
        /// <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
        /// <param name="annotations">Xml readers providing additional annotations to the model.</param>
        /// <param name="model">The model generated by parsing.</param>
        /// <param name="errors">Errors reported while parsing.</param>
        /// <returns>Success of the parse operation.</returns>
        public static bool TryParse(IEnumerable<XmlReader> readers, IEnumerable<XmlReader> annotations, out IEdmModel model, out IEnumerable<EdmError> errors)
        {
            return TryParse(readers, annotations, false, out model, out errors);
        }

        /// <summary>
        ///  Returns an IEdmModel for the given CSDL artifacts.
        /// </summary>
        /// <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
        /// <param name="annotations">Xml readers providing additional annotations to the model.</param>
        /// <param name="allowRemovingImmutableAnnotations">A flag denoting whether the resulting IEdmModel will allow the removal of immutable CSDL annotations.</param>
        /// <param name="model">The model generated by parsing.</param>
        /// <param name="errors">Errors reported while parsing.</param>
        /// <returns>Success of the parse operation.</returns>
        public static bool TryParse(IEnumerable<XmlReader> readers, IEnumerable<XmlReader> annotations, bool allowRemovingImmutableAnnotations, out IEdmModel model, out IEnumerable<EdmError> errors)
        {
            IDictionary<string, ExternalAnnotations> annotationsDictionary;
            if (!AnnotationsParser.TryParse(annotations, out annotationsDictionary))
            {
                model = null;
                // TODO: handle errors in annotation parser
                errors = new EdmError[] { new EdmError(new CsdlLocation(0, 0), EdmErrorCode.FailedToParseExternalAnnotations, "Failed to parse external annotations") };
                return false;
            }

            CsdlModel ast;
            if (CsdlParser.TryParse(readers, out ast, out errors))
            {
                model = new CsdlSemanticsModel(ast, annotationsDictionary, new AnnotationsManager(allowRemovingImmutableAnnotations));
                return true;
            }

            model = null;
            return false;
        }
    }
}
